import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

const DashboardCard = ({ title, value, icon, className }) => (
  <div className={`bg-white p-6 rounded-lg shadow-md ${className}`}>
    <div className="flex items-center justify-between">
      <div>
        <p className="text-sm text-gray-500 mb-1">{title}</p>
        <p className="text-2xl font-bold">{value}</p>
      </div>
      <div className="text-2xl text-gray-400">{icon}</div>
    </div>
  </div>
);

const SellerDashboard = () => {
    const [dashboardData, setDashboardData] = useState(null);
    const [loading, setLoading] = useState(true);
    const access = useSelector(state => state.auth.access);
    const sellerId = useSelector(state => state.auth.user?.seller_id)
  
    useEffect(() => {
      const fetchDashboardData = async () => {
        console.log('Attempting to fetch with:', {
          sellerId,
          access,
          url: `http://localhost:8000/api/seller_dashboardd/${sellerId}/`
        });
  
        try {
          const response = await axios.get(
            `http://localhost:8000/api/seller_dashboardd/${sellerId}/`,
            {
              headers: {
                'Authorization': `JWT ${access}`
              }
            }
          );
          console.log('Response received:', response.data);
          setDashboardData(response.data);
        } catch (error) {
          console.error('Error details:', {
            status: error.response?.status,
            data: error.response?.data,
            message: error.message
          });
        } finally {
          setLoading(false);
        }
      };
  
      if (sellerId) {
        fetchDashboardData();
      } else {
        console.log('No sellerId available:', sellerId);
        setLoading(false);
      }
    }, [sellerId, access]);

  if (loading) {
    return (
        <div className="min-h-screen bg-gray-50 p-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <div>Loading dashboard...</div>
        </div>
      </div>
    );
  }

  if (!dashboardData) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="text-center">Error loading dashboard data</div>
      </div>
    );
  }

  const { seller, metrics, recent_orders } = dashboardData;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        {/* Welcome Section */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-800">
            Welcome back, {seller.business_name}!
          </h1>
          <p className="text-gray-600 mt-2">
            Here's what's happening with your store today.
          </p>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <DashboardCard
            title="Total Revenue"
            value={`$${metrics.total_revenue.toLocaleString()}`}
            icon="💰"
          />
          <DashboardCard
            title="Total Orders"
            value={metrics.total_orders}
            icon="📦"
          />
          <DashboardCard
            title="Active Products"
            value={metrics.active_products}
            icon="🏷️"
          />
          <DashboardCard
            title="Total Products"
            value={metrics.total_products}
            icon="📊"
          />
        </div>

        {/* Charts Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4">Revenue Overview</h2>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={recent_orders}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="created_at" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="total_amount" fill="#4F46E5" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </div>

          {/* Recent Orders */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4">Recent Orders</h2>
            <div className="overflow-x-auto">
              <table className="min-w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-3">Order ID</th>
                    <th className="text-left py-3">Amount</th>
                    <th className="text-left py-3">Status</th>
                  </tr>
                </thead>
                <tbody>
                  {recent_orders.map((order) => (
                    <tr key={order.id} className="border-b">
                      <td className="py-3">{order.id}</td>
                      <td className="py-3">${order.total_amount}</td>
                      <td className="py-3">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          order.status === 'completed' ? 'bg-green-100 text-green-800' :
                          order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {order.status}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* Store Information */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4">Store Information</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div>
              <p className="text-gray-600 mb-1">Business Address</p>
              <p className="font-medium">{seller.business_address}</p>
            </div>
            <div>
              <p className="text-gray-600 mb-1">Contact</p>
              <p className="font-medium">{seller.phone}</p>
            </div>
            <div>
              <p className="text-gray-600 mb-1">Business Hours</p>
              <p className="font-medium">{seller.business_hours}</p>
            </div>
            <div>
              <p className="text-gray-600 mb-1">Delivery Radius</p>
              <p className="font-medium">{seller.delivery_radius} km</p>
            </div>
            <div>
              <p className="text-gray-600 mb-1">Business Type</p>
              <p className="font-medium">{seller.business_type}</p>
            </div>
            <div>
              <p className="text-gray-600 mb-1">Website</p>
              <p className="font-medium">
                {seller.website ? (
                  <a href={seller.website} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                    Visit Website
                  </a>
                ) : 'Not provided'}
              </p>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <button className="bg-blue-600 text-white p-4 rounded-lg hover:bg-blue-700 transition duration-300">
            Add New Product
          </button>
          <button className="bg-green-600 text-white p-4 rounded-lg hover:bg-green-700 transition duration-300">
            View All Orders
          </button>
          <button className="bg-purple-600 text-white p-4 rounded-lg hover:bg-purple-700 transition duration-300">
            Update Store Info
          </button>
        </div>
      </div>
    </div>
  );
};

export default SellerDashboard;